{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["imgwCiv","imgwMil","rsstojson","notam","App","useState","query","setQuery","weather","setWeather","notamResp","setNotam","milList","civList","useEffect","a","includes","fetch","metarData","text","response","parser","DOMParser","xml","parseFromString","metar","getElementsByTagName","innerHTML","console","log","fetchData","fetchNotams","notamData","json","notams","length","i","push","key","startdate","enddate","message","dateBuilder","d","day","getDay","date","getDate","month","getMonth","year","getFullYear","className","disabled","value","onChange","e","target","label","map","el","toString","href","Date","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.3c3bafc0.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\n\n\nconst imgwCiv = {\n  /*key: \"c0d9809aad20beee9e67291d769f074a\"*/\n  base: \"http://awiacja.imgw.pl/rss/metar30.php?airport=\"\n}\n\nconst imgwMil = {\n  base : \"http://awiacja.imgw.pl/rss/metarmil.php?airport=\"\n}\n\nconst rsstojson = {\n  base : \"https://cors-anywhere.herokuapp.com/\"\n}\n\n/* used at first version but have to pay for additional feeds \nconst rsstojson = {\n  base : \"https://api.rss2json.com/v1/api.json?rss_url=\",\n  api : \"5kfv0uqurdoybsvtjd3hykpcmtotivlkdumjgts2\"\n}\n*/\n\n\n\nconst notam = {\n  base: \"https://v4p4sz5ijk.execute-api.us-east-1.amazonaws.com/anbdata/states/notams/notams-realtime-list?\",\n  api: \"d3cb82c0-d0fb-11ea-92a6-f1939f4f9295\"\n}\n\n\nfunction App() {\n  const [query, setQuery] = useState('');\n  const [weather, setWeather] = useState([]);\n  const [notamResp, setNotam] = useState([]);\n  \n  const milList = ['EPCE', 'EPDA', 'EPDE', 'EPIR', 'EPKS', 'EPLK', 'EPLY', 'EPMB', 'EPMI', 'EPMM', 'EPNA', 'EPOK', 'EPPR', 'EPPW', 'EPRA', 'EPSN', 'EPTM']\n  const civList = ['EPBY', 'EPGD', 'EPKK', 'EPKT', 'EPLB', 'EPLL', 'EPMO', 'EPPO', 'EPRA', 'EPRZ', 'EPSC', 'EPSY', 'EPWA', 'EPWR', 'EPZG']\n  \n  \n  /*\n  const search = evt => {\n    if (evt.key === \"Enter\") {\n      fetch(`${api.base}weather?q=${query}&units=metric&appid=${api.key}`)\n      .then(result => result.json())\n      .then(result => { \n      setWeather(result);\n      setQuery('');\n      console.log(result);\n      })\n    }\n  }\n  */\n\n\n  /*\n  useEffect(() => {\n    async function fetchData () {\n      if (milList.includes(query)) { \n      const metarData = await fetch(`${rsstojson.base}${imgwMil.base}${query}&api_key=${rsstojson.api}`)\n      let metar = await metarData.json();\n       } else {\n        const metar = await fetch(`${rsstojson.base}${imgwCiv.base}${query}&api_key=${rsstojson.api}`)\n      metar\n          .json()\n          .then(metar => setWeather(metar))\n          .catch(err => new Error('IMGW do not respond, please reload'))\n          \n       }\n    };\n\n    fetchData()\n    console.log(query)\n    console.log(weather)\n    \n  }, [query]);\n\n*/\n  \n  useEffect(() => {\n    setWeather(['Loading IMGW MEATR database..'])\n    async function fetchData () {\n      const list = ['EPCE', 'EPDA', 'EPDE', 'EPIR', 'EPKS', 'EPLK', 'EPLY', 'EPMB', 'EPMI', 'EPMM', 'EPNA', 'EPOK', 'EPPR', 'EPPW', 'EPRA', 'EPSN', 'EPTM'];\n      if (list.includes(query)) {\n      const metarData = await fetch(`${rsstojson.base}${imgwMil.base}${query}`)\n      let response = await metarData.text();\n      \n      let parser = new DOMParser();\n      let xml = parser.parseFromString(response, \"application/xml\");\n      let metar = xml.getElementsByTagName(\"description\")[1].innerHTML;\n      \n        setWeather(metar);\n        console.log(xml)\n        console.log(metar)\n      \n      \n       } else {\n         \n      const metarData = await fetch(`${rsstojson.base}${imgwCiv.base}${query}`)\n      const response = await metarData.text();\n\n      let parser = new DOMParser();\n      let xml = parser.parseFromString(response, \"application/xml\");\n      let metar = xml.getElementsByTagName(\"description\")[1].innerHTML;\n\n        setWeather(metar);\n        console.log(response)\n        /*\n        console.log(weather)\n        */\n         \n       }\n       \n    }\n\n    fetchData()\n    /*\n    console.log(weather)\n    */\n  }, [query]);\n\n  \nuseEffect(() => {\n  setNotam(['Loading ICAO NOTAM database...'])\n  async function fetchNotams () {\n    const notamData = await fetch(`${notam.base}api_key=${notam.api}&format=json&criticality=&locations=${query}`)\n    const response = await notamData.json();\n    let notams = [];\n    if(response.length !== 0) {\n      //ICAO API not always responds, sometimes its empty array\n    for (let i = 0; i < response.length; i++) {\n      notams.push(`Nr: ${response[i].key}, Start date: ${response[i].startdate}, End date: ${response[i].enddate}, Message: ${response[i].message}`)\n    }\n  } else {\n    notams.push('ICAO NOTAM API not respond. I`m trying to load data.. Please wait or refresh:)')\n    fetchNotams()\n  }\n    setNotam(notams);\n    /*\n    console.log(response)\n    console.log(response.length)\n  console.log(notamResp)\n  */\n  };\n\n  \n  fetchNotams()\n\n}, [query])\n  \n  \n\n/*\n  const searchCiv = () => {\n    fetch(`${rsstojson.base}${imgwCiv.base}${query}&api_key=${rsstojson.api}`)\n    .then(result => {\n      if (result.ok) {\n        return result.json();\n      } else {\n        throw new Error('IMGW do not respond, please reload')\n      }\n    })\n    .then(result => {\n      setWeather(result);\n      \n\n      console.log(result);\n    })\n    fetch(`${notam.base}api_key=${notam.api}&format=json&criticality=&locations=${query}`)\n    .then(result => {\n      if (result.ok) {\n        return result.json();\n      } else {\n        throw new Error('ICAO NOTAM do not respond, please reload')\n      }\n    })\n    .then(result => {\n      setNotam(result);\n\n      console.log(result);\n    })\n  }\n  \n  \n\n  const searchMil = () => {\n    fetch(`${rsstojson.base}${imgwMil.base}${query}&api_key=${rsstojson.api}`)\n    .then(result => {\n      if (result.ok) {\n        return result.json();\n      } else {\n        throw new Error('IMGW METAR do not respond, please reload')\n      }\n    })\n    .then(result => {\n      setWeather(result);\n      \n\n      console.log(result);\n    })\n    fetch(`${notam.base}api_key=${notam.api}&format=json&criticality=&locations=${query}`)\n    .then(resp => {\n      if (resp.ok) {\n        return resp.json();\n      } else {\n        throw new Error('ICAO NOTAM do not respond, please reload')\n      }\n    })\n    .then(resp => {\n        setNotam(resp)\n        let notams = []\n        for (let i = 0; i < notamResp.length; i++){\n          \n          notams.push(`Notam nr ${i} ${i[0]}`)\n        }\n      \n      setNotam(notams);\n\n      console.log(resp);\n      console.log(notamResp)\n    })  \n  }\n  */\n\n  /*\n  function CreateNotams () {\n    let notams = []\n    for (let i = 0; i < notamResp.length; i++){\n      \n      notams.push(`Notam nr ${i} ${i[0]}`)\n    }\n    return notams\n  }\n\n  /*\n  const searchNotam = () => {\n    fetch(`${notam.base}api_key=${notam.api}&format=json&criticality=&locations=${query}`)\n    .then(result => {\n      if (result.ok) {\n        return result.json();\n      } else {\n        throw new Error('ICAO NOTAM do not respond')\n      }\n    })\n    .then(result => {\n      setNotam(result);\n\n      console.log(result);\n    })\n    \n    .then(response => response.json())\n    .then(response => {\n      setNotam(response);\n\n      console.log(response)\n    })\n  }\n  */\n\n  \n  \n  /*\n  const search = () => {\n    fetch(`${api.base}${query}`)\n    .then(result => result.text())\n    .then(str => new window.DOMParser().parseFromString(str, \"text/xml\"))\n    .then(data => console.log(data))\n  }\n  */\n\n  const dateBuilder = (d) => {\n    let months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\n    let days = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\n\n    let day = days[d.getDay()];\n    let date = d.getDate();\n    let month = months[d.getMonth()];\n    let year = d.getFullYear();\n\n    return `${day}, ${date} ${month} ${year}`;\n  }\n\n  return (\n    <div className={\n      (query !==\"\") ? (milList.includes(query) ? 'App mil' : 'App')\n      : 'App'\n    }>\n      <main> \n\n        <form>\n          <select disabled={false} className=\"selectbox\" value={query} \n          onChange={e => setQuery(e.target.value)}\n          /*onClick={milList.includes(query) ? searchMil : searchCiv}*/>\n            <option>Click here</option>\n            <optgroup label=\"Military\">\n              {milList.map(el=> {\n                return (\n                <option key={el.toString()} value={el}>{el}</option>\n                )\n              })}\n            </optgroup>\n            <optgroup label=\"Civil\">\n            {civList.map(el=> {\n                return (\n                <option key={el.toString()} value={el}>{el}</option>\n                )\n              })}\n\n            </optgroup>\n          </select>\n        </form>\n\n        <div className=\"link-box\">\n        <a className=\"link\" href=\"https://airspace.pansa.pl/\" target=\"blank\">AUP</a>\n        <a className=\"link\" href=\"https://www.ais.pansa.pl/aip/aip.html\" target=\"blank\">AIP Civ</a>\n        <a className=\"link\" href=\"https://www.ais.pansa.pl/mil/aip.html\" target=\"blank\">AIP Mil</a>\n      </div>\n\n      {(milList.includes(query) || civList.includes(query)) ? (\n      <div>\n        <div className=\"location-box\">\n        <div className=\"location\">{query}</div>\n          <div  className=\"date\">{dateBuilder(new Date())}</div>\n        </div>\n\n        <div className=\"metar-box\">\n          <div className=\"metar\">{weather}</div>\n        </div>\n\n        \n        <div className=\"notam-box\">\n          Notam:\n          {notamResp.map(el=> {\n            return (\n            <div className=\"notam\" key={el.toString()} value={el}>{el}</div>\n            )\n          })}\n        </div>\n\n      </div>\n      ) : (\n        <div>\n        <div className=\"noinputbox\">\n         <div className=\"noinput\">Choose aerodrome above.</div>\n          <div  className=\"noinputdate\">{dateBuilder(new Date())}</div>\n        </div>\n      </div>\n      )}\n\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}